{"ast":null,"code":"var _jsxFileName = \"/home/innovationlab/Desktop/Final_Website/frontend_final/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { login } from '../auth';\nimport { useNavigate } from 'react-router-dom';\nimport \"./Login.css\";\nimport image1 from \"../image.png\";\nimport triple_clicked from \"../triple_clicked.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const [isOpen, setIsOpen] = useState(false);\n  const handleButtonClick = () => {\n    setIsOpen(!isOpen);\n  };\n  const loginUser = data => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    const res = fetch('/auth/login', requestOptions).then(res => res.json()).then(data => {\n      if (data) {\n        console.log(data.data.access_token);\n        localStorage.setItem('access_token', data.data.access_token);\n        localStorage.setItem('refresh_token', data.data.refresh_token);\n        login(data.data.access_token);\n        navigate('/upload', {\n          state: {\n            username: data.username\n          }\n        });\n      } else {\n        setError('Invalid username or password');\n      }\n    });\n    reset();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login_main_div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"login_header\",\n      children: \"Enhance AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"login_small_header\",\n      children: \"Enhance images using AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"1Ni9pozD2kaFXj+cGFCYPEFLrnI=\", false, function () {\n  return [useForm, useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","Form","Button","Alert","Link","useForm","login","useNavigate","image1","triple_clicked","jsxDEV","_jsxDEV","LoginPage","_s","register","handleSubmit","reset","formState","errors","error","setError","navigate","isOpen","setIsOpen","handleButtonClick","loginUser","data","requestOptions","method","headers","body","JSON","stringify","res","fetch","then","json","console","log","access_token","localStorage","setItem","refresh_token","state","username","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/innovationlab/Desktop/Final_Website/frontend_final/src/components/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { login } from '../auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport \"./Login.css\";\r\nimport image1 from \"../image.png\";\r\nimport triple_clicked from \"../triple_clicked.png\"\r\n\r\n\r\n\r\nconst LoginPage = () => {\r\n  const { register, handleSubmit, reset, formState: { errors } } = useForm();\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleButtonClick = () => {\r\n      setIsOpen(!isOpen);\r\n    };\r\n\r\n  const loginUser = (data) => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      body:JSON.stringify(data)\r\n    };\r\n\r\n    const res = fetch('/auth/login', requestOptions)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data) {\r\n          console.log(data.data.access_token)\r\n          localStorage.setItem('access_token', data.data.access_token)\r\n          localStorage.setItem('refresh_token', data.data.refresh_token)\r\n          login(data.data.access_token);\r\n          navigate('/upload',  { state: { username: data.username } });\r\n        } else {\r\n          setError('Invalid username or password');\r\n        }\r\n      });\r\n\r\n    reset();\r\n  }\r\n\r\n  return (\r\n    <div className=\"login_main_div\">\r\n      <h1 className = \"login_header\">Enhance AI</h1>\r\n      <p className = \"login_small_header\">Enhance images using AI</p>\r\n      {/*<div className=\"login_form_div\">\r\n        {error && (\r\n          <Alert variant=\"danger\" onClose={() => setError(null)} dismissible>{error}</Alert>\r\n        )}\r\n\r\n        <h1 className=\"login_login\">Login</h1>\r\n        \r\n        <form>\r\n          <Form.Group>\r\n            <Form.Control\r\n              type=\"text\" placeholder='  Username' className = \"login_username\"\r\n              {...register(\"username\", { required: true, maxLength: 25 })}\r\n            />\r\n          </Form.Group>\r\n          {errors.username?.type === \"required\" && <p style={{ position : \"absolute\", color: \"red\", top : \"22vh\", left : \"13.6vw\" }}>Username is required</p>}\r\n          {errors.username?.type === \"maxLength\" && <p style={{ position : \"absolute\", color: \"red\", top : \"22vh\", left : \"12.6vw\" }}>Max characters should be 25</p>}\r\n\r\n          <Form.Group>\r\n            <Form.Control\r\n              type=\"password\" placeholder='  Password' className = \"login_password\"\r\n              {...register(\"password\", { required: true, minLength: 8 })}\r\n            />\r\n          </Form.Group>\r\n          {errors.password?.type === \"required\" && <p style={{ position : \"absolute\", color: \"red\", top : \"30vh\", left : \"13.6vw\" }}> Password is required</p>}\r\n          {errors.password?.type === \"minLength\" && <p style={{ position : \"absolute\", color: \"red\", top : \"30vh\", left : \"11.8vw\"  }}>Minimum characters should be 8</p>}\r\n          <br></br>\r\n\r\n          <Form.Group>\r\n            <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(loginUser)} className = \"login_butt\">\r\n              <p style = {{position : \"relative\", top : \"-1vh\"}}>Login</p>\r\n            </Button>\r\n          </Form.Group>\r\n          <br></br>\r\n          <Form.Group>\r\n            <small style = {{position : \"absolute\", top : \"42vh\", left : \"9.25vw\"}}>\r\n              Do you already have an account?\r\n              <Link className = \"create\" to=\"/signup\">Create Account</Link>\r\n            </small>\r\n          </Form.Group>\r\n        </form>\r\n        </div>*/}\r\n      {/*<div className = \"login_img_container\">\r\n        <img src = {image1} className = \"login_img_style\" alt = \"robot_image\"/>\r\n      </div>\r\n        <button className = \"login_menu_button\" onClick={handleButtonClick}><img className = \"login_img_clicked\" src = {triple_clicked} alt = \"menu-buttonss\"></img></button>\r\n      {isOpen && (<div className = \"login_menu\">\r\n        <button className = \"login_menu_button_clicked\" onClick={handleButtonClick}><img className = \"login_img_clicked\" src = {triple_clicked} alt = \"menu-buttonss\"></img></button>\r\n          <div className = \"login_info\">\r\n          <button className = \"login_home\"><a className = \"login_home\" href = \"/\">Home</a></button>\r\n          <button className = \"login_instr\"><a className = \"login_home\" href = \"/signup\">Sign Up</a></button>\r\n          </div>\r\n      </div>)}*/}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,MAAM,EAAEC,KAAK,QAAQ,iBAAiB;AACrD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,aAAa;AACpB,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,cAAc,MAAM,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIlD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,KAAK;IAAEC,SAAS,EAAE;MAAEC;IAAO;EAAE,CAAC,GAAGb,OAAO,CAAC,CAAC;EAC1E,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMqB,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMwB,iBAAiB,GAAGA,CAAA,KAAM;IAC9BD,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAEH,MAAMG,SAAS,GAAIC,IAAI,IAAK;IAC1B,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACN,IAAI;IAC1B,CAAC;IAED,MAAMO,GAAG,GAAGC,KAAK,CAAC,aAAa,EAAEP,cAAc,CAAC,CAC7CQ,IAAI,CAACF,GAAG,IAAIA,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC,CACvBD,IAAI,CAACT,IAAI,IAAI;MACZ,IAAIA,IAAI,EAAE;QACRW,OAAO,CAACC,GAAG,CAACZ,IAAI,CAACA,IAAI,CAACa,YAAY,CAAC;QACnCC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEf,IAAI,CAACA,IAAI,CAACa,YAAY,CAAC;QAC5DC,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEf,IAAI,CAACA,IAAI,CAACgB,aAAa,CAAC;QAC9DpC,KAAK,CAACoB,IAAI,CAACA,IAAI,CAACa,YAAY,CAAC;QAC7BlB,QAAQ,CAAC,SAAS,EAAG;UAAEsB,KAAK,EAAE;YAAEC,QAAQ,EAAElB,IAAI,CAACkB;UAAS;QAAE,CAAC,CAAC;MAC9D,CAAC,MAAM;QACLxB,QAAQ,CAAC,8BAA8B,CAAC;MAC1C;IACF,CAAC,CAAC;IAEJJ,KAAK,CAAC,CAAC;EACT,CAAC;EAED,oBACEL,OAAA;IAAKkC,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BnC,OAAA;MAAIkC,SAAS,EAAG,cAAc;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9CvC,OAAA;MAAGkC,SAAS,EAAG,oBAAoB;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAqD5D,CAAC;AAEV,CAAC;AAACrC,EAAA,CA/FID,SAAS;EAAA,QACoDP,OAAO,EAEvDE,WAAW;AAAA;AAAA4C,EAAA,GAHxBvC,SAAS;AAiGf,eAAeA,SAAS;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}